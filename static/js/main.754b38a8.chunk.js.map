{"version":3,"sources":["assets/temp.jpg","AddOption.js","firebase.js","MovieOption.js","ResultScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddOption","handleUserInput","e","setState","userInput","target","value","deferedAddMovie","props","addMovieHandler","state","deferedShowResults","boolValue","showResultsHandler","className","htmlFor","type","name","onFocus","onChange","this","aria-label","onClick","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MovieOption","deferredLike","key","voteHandler","deferredDislike","likePressed","dislikePressed","votes","src","image","tempImg","alt","movieID","ResultScreen","message","App","event","dbRef","database","ref","preventDefault","console","log","axios","url","method","responseType","params","api_key","query","then","response","data","results","movieImg","poster_path","newMovie","title","push","showResults","voteToAdd","transaction","currentVotes","movieOptions","on","snapshot","val","movieArray","movieTitle","map","movie","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.754b38a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/temp.75e38e06.jpg\";","import React, { Component } from \"react\";\r\n// this component will handle adding a new movie option to the database\r\n\r\nclass AddOption extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n    };\r\n  }\r\n\r\n  // function to handle userInput and store potential movie titles into state\r\n  handleUserInput = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value,\r\n    });\r\n  };\r\n\r\n  // defered function to pass movie titles from input to main App\r\n  deferedAddMovie = (e) => this.props.addMovieHandler(e, this.state.userInput);\r\n\r\n  //defered function to show the window, it takes a boolean value to update the state in App\r\n  deferedShowResults = (e, boolValue) => {this.props.showResultsHandler(boolValue)};\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"addOptionContainer\">\r\n        <li>\r\n          <label htmlFor=\"movieOption\">Add movie:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"movieOption\"\r\n            onFocus={(e) => this.deferedShowResults(e, true)}\r\n            onChange={this.handleUserInput}\r\n          />\r\n        </li>\r\n        <li className=\"addButton\">\r\n          <button\r\n            aria-label=\"Click here to add a movie option\"\r\n            onClick={this.deferedAddMovie}\r\n          >\r\n            <i className=\"fas fa-plus\"></i>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddOption;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCD6Q57bLOt5Bqzs9iJQM0nVZaGjImMrTg\",\r\n  authDomain: \"movie-vote-e2d81.firebaseapp.com\",\r\n  databaseURL: \"https://movie-vote-e2d81.firebaseio.com\",\r\n  projectId: \"movie-vote-e2d81\",\r\n  storageBucket: \"movie-vote-e2d81.appspot.com\",\r\n  messagingSenderId: \"813095662762\",\r\n  appId: \"1:813095662762:web:31d9582c970f309c98ccd3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport tempImg from \"./assets/temp.jpg\";\r\nimport firebase from \"./firebase\";\r\n\r\nclass MovieOption extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      likePressed: false,\r\n      dislikePressed: false\r\n    };\r\n  }\r\n\r\n  deferredLike = (e, key) => {\r\n    this.props.voteHandler(e, key, 1);\r\n  }\r\n\r\n  deferredDislike = (e, key) => {\r\n    this.props.voteHandler(e, key, -1);\r\n  }\r\n\r\n\r\n    render() {\r\n      // you can create some logic here like adding a variable and then instead of putting className put a variable\r\n      // console.log(\"props\", this.props);\r\n        return (\r\n          <ul className=\"movieOptionContainer\">\r\n            <li className=\"votes\">\r\n              <p>Votes: {this.props.votes}</p>\r\n            </li>\r\n            <li className=\"movieImg\">\r\n              <img\r\n                src={this.props.image === \"\" ? tempImg : this.props.image}\r\n                alt=\"a sample movie image\"\r\n              />\r\n            </li>\r\n            <li className=\"likeAndDislike\">\r\n              {/* put a turnerary that decides if it has been clicked then unclick dislike inside the button itself since it is JSX*/}\r\n              <button\r\n                className=\"like\"\r\n                onClick={(e) => this.deferredLike(e, this.props.movieID)}\r\n              >\r\n                <i className=\"fas fa-thumbs-up\"></i>\r\n              </button>\r\n              <button\r\n                className=\"dislike\"\r\n                onClick={(e) => this.deferredDislike(e, this.props.movieID)}\r\n              >\r\n                <i className=\"fas fa-thumbs-down\"></i>\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MovieOption;","import React, { Component } from 'react';\r\n\r\n\r\nclass ResultScreen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: \"No results found :(\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"resultsContainer\">\r\n            <div className=\"searchMessageContainer\">\r\n              <p className=\"message\">{this.state.message}</p>\r\n              <button className=\"close\">\r\n                <i className=\"far fa-times-circle\"></i>\r\n              </button>\r\n            </div>\r\n            <ul className=\"results\"></ul>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultScreen;","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport AddOption from \"./AddOption\";\r\nimport MovieOption from \"./MovieOption\";\r\nimport firebase from \"./firebase\";\r\nimport axios from \"axios\";\r\nimport ResultScreen from \"./ResultScreen\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    //put all the movie options in an array and map over them\r\n    super();\r\n    this.state = {\r\n      movieOptions: [],\r\n      userInput: \"enter a movie\",\r\n      showResults: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //set up listener to database\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      const movieArray = [];\r\n      for (let key in data) {\r\n        movieArray.push(\r\n          {\r\n            movieTitle: data[key].title,\r\n            movieID: key,\r\n            image: data[key].image,\r\n            votes: data[key].votes\r\n          }\r\n        )\r\n      }\r\n      // update the movie state array\r\n      this.setState({\r\n        movieOptions: movieArray\r\n      })\r\n    });\r\n  }\r\n\r\n  // helper methods\r\n  addMovieHandler = (event, userInput) => {\r\n    \r\n    \r\n    const dbRef = firebase.database().ref();\r\n    event.preventDefault();\r\n    if (userInput !== \"\") {\r\n      console.log(\"clicked for a movie\");\r\n      const apiKey = `ffb95a5b116cb8ae246c7c6f51c94ed6`;\r\n      \r\n      // make an api call to themovieDatabbase\r\n      const movieDBURL = `https://api.themoviedb.org/3/search/movie?`;\r\n      //endpoint to movie poster path\r\n      const baseImageURL = `https://image.tmdb.org/t/p/w500`;\r\n\r\n\r\n      axios({\r\n        url: movieDBURL,\r\n        method: `GET`,\r\n        responseType: `json`,\r\n        params: {\r\n          api_key: apiKey,\r\n          query: userInput\r\n        }\r\n      }).then(\r\n        (response) => {\r\n          console.log(response.data.results[0]);\r\n          \r\n\r\n\r\n          const movieImg = `${baseImageURL}${response.data.results[0].poster_path}`;\r\n          const newMovie = {\r\n            title: userInput,\r\n            votes: 0,\r\n            image: movieImg,\r\n          };\r\n          dbRef.push(newMovie);\r\n          this.setState({\r\n            userInput: \"\"\r\n          });\r\n        }\r\n      )\r\n\r\n      \r\n    }\r\n  }\r\n\r\n  //this function will update state to show the results or not\r\n  showResultsHandler = (boolValue) => this.setState({showResults: boolValue});\r\n\r\n  voteHandler = (event, key, voteToAdd) => {\r\n    // go to key in database respreseinting the movie\r\n    // update the vote b vote to add\r\n    const dbRef = firebase.database().ref(key+\"/votes\");\r\n\r\n    const newVotes = dbRef.votes;\r\n\r\n    dbRef.transaction(function(currentVotes) {\r\n      return currentVotes + voteToAdd;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AddOption\r\n          showResultsHandler={this.showResultsHandler}\r\n          addMovieHandler={this.addMovieHandler}\r\n        />\r\n        {this.state.showResults && <ResultScreen />}\r\n        <ul className=\"movieGallery\">\r\n          {this.state.movieOptions.map((movie, i) => {\r\n            const { movieID, movieTitle, votes, image } = movie;\r\n            return (\r\n              <MovieOption\r\n                key={i}\r\n                movieID={movieID}\r\n                movieTitle={movieTitle}\r\n                image={image}\r\n                votes={votes}\r\n                voteHandler={this.voteHandler}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}