{"version":3,"sources":["assets/temp.jpg","SearchOption.js","firebase.js","MovieOption.js","MovieResult.js","ResultScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchOption","handleUserInput","e","setState","userInput","target","value","state","props","noInputHandler","inputHandler","deferedShowResults","boolValue","showResultsHandler","className","htmlFor","type","name","onFocus","onChange","this","placeholder","class","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MovieOption","deferredLike","key","voteHandler","deferredDislike","likePressed","dislikePressed","votes","src","image","alt","movieTitle","onClick","movieID","MovieResult","deferedAddMovie","addMovieHandler","title","aria-label","ResultScreen","message","children","App","resultsMessage","database","ref","movieDBURL","axios","url","method","responseType","params","api_key","query","include_adult","page","then","response","theResponse","data","results","length","resultsHandler","baseImageURL","movieResults","forEach","movie","movieOptionsTitles","includes","poster_path","movieImg","newMovie","push","noResultsToShow","poster","showResults","event","voteToAdd","dbRef","transaction","currentVotes","movieOptions","movieOptionTitles","on","snapshot","val","movieArray","titlesArray","sort","a","b","newResults","filter","result","map","movieResult","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2e236158.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/temp.75e38e06.jpg\";","import React, { Component } from \"react\";\r\n// this component will handle adding a new movie option to the database\r\n\r\n// this class is to search for movie results\r\nclass SearchOption extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n    };\r\n  }\r\n\r\n  // function to handle userInput and store potential movie titles into state\r\n  handleUserInput = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value,\r\n    });\r\n\r\n    this.state.userInput === \"\" ?\r\n    this.props.noInputHandler() :\r\n    this.props.inputHandler(this.state.userInput);\r\n  };\r\n\r\n  //defered function to show the window, it takes a boolean value to update the state in App\r\n  deferedShowResults = (e, boolValue) => {this.props.showResultsHandler(boolValue)};\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"searchOptionContainer\">\r\n        <label htmlFor=\"movieOption\" className=\"visuallyHidden\">\r\n          Search for a movie\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"movieOption\"\r\n          onFocus={(e) => this.deferedShowResults(e, true)}\r\n          onChange={this.handleUserInput}\r\n          placeholder=\"Search for a movie\"\r\n        />\r\n        <p>\r\n          <i class=\"fas fa-search\"></i>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchOption;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCD6Q57bLOt5Bqzs9iJQM0nVZaGjImMrTg\",\r\n  authDomain: \"movie-vote-e2d81.firebaseapp.com\",\r\n  databaseURL: \"https://movie-vote-e2d81.firebaseio.com\",\r\n  projectId: \"movie-vote-e2d81\",\r\n  storageBucket: \"movie-vote-e2d81.appspot.com\",\r\n  messagingSenderId: \"813095662762\",\r\n  appId: \"1:813095662762:web:31d9582c970f309c98ccd3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport tempImg from \"./assets/temp.jpg\";\r\nimport firebase from \"./firebase\";\r\n\r\n// this class represents the movie option you can vote for.\r\nclass MovieOption extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      likePressed: false,\r\n      dislikePressed: false\r\n    };\r\n  }\r\n\r\n  deferredLike = (e, key) => {\r\n    this.props.voteHandler(e, key, 1);\r\n  }\r\n\r\n  deferredDislike = (e, key) => {\r\n    this.props.voteHandler(e, key, -1);\r\n  }\r\n\r\n\r\n    render() {\r\n        return (\r\n          <article className=\"movieOptionContainer\">\r\n              <p className=\"votes\">Votes: {this.props.votes}</p>\r\n            <ul className=\"imgAndLikes\">\r\n              <li className=\"movieImg\">\r\n                <img\r\n                  src={this.props.image}\r\n                  alt={\"Movie poster for: \" + this.props.movieTitle}\r\n                />\r\n              </li>\r\n              <li className=\"likeAndDislike\">\r\n                <button\r\n                  className=\"like\"\r\n                  onClick={(e) => this.deferredLike(e, this.props.movieID)}\r\n                >\r\n                  <i className=\"fas fa-thumbs-up\"></i>\r\n                </button>\r\n                <button\r\n                  className=\"dislike\"\r\n                  onClick={(e) => this.deferredDislike(e, this.props.movieID)}\r\n                >\r\n                  <i className=\"fas fa-thumbs-down\"></i>\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieOption;","import React, { Component } from 'react';\r\n\r\n// this class is to show a potential movie result and show to screen\r\nclass MovieResult extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // defered function to pass movie titles from input to main App\r\n  deferedAddMovie = (e) => this.props.addMovieHandler(this.props.title, this.props.image);\r\n\r\n  render() {\r\n    return (\r\n      <li className=\"movieResult\">\r\n        <div className=\"resultPoster\">\r\n          <img src={this.props.image} alt={this.props.title} />\r\n        </div>\r\n        <button\r\n          aria-label=\"Click here to add a movie option\"\r\n          onClick={this.deferedAddMovie}\r\n          className=\"addToList\"\r\n        >\r\n          Add Candidate <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieResult;","import React, { Component } from 'react';\r\nimport MovieResult from './MovieResult.js';\r\n\r\n// this class is to hold movie results and display to screen\r\nclass ResultScreen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: \"No results found :(\"\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"resultsContainer\">\r\n            <div className=\"searchMessageContainer\">\r\n              <p className=\"message\">Click \"X\" to close results</p>\r\n              <button\r\n                className=\"close\"\r\n                onClick={() => {\r\n                  this.props.showResultsHandler(false);\r\n                }}\r\n              >\r\n                <i className=\"far fa-times-circle\"></i>\r\n              </button>\r\n            </div>\r\n            <ul className=\"results\">\r\n              {this.props.children }\r\n            </ul>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultScreen;","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport SearchOption from \"./SearchOption\";\r\nimport MovieOption from \"./MovieOption\";\r\nimport firebase from \"./firebase\";\r\nimport axios from \"axios\";\r\nimport ResultScreen from \"./ResultScreen\";\r\nimport MovieResult from './MovieResult';\r\n\r\n\r\n//TO MARKER , I am having issues updating the search results LIVE when a movie is added to the movieOptions. It looks like my results array state is being updated when I add movies, but I dont understand why my new search results are not rendering new MovieResults when the results state is updated. \r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    //put all the movie options in an array and map over them\r\n    super();\r\n    this.state = {\r\n      movieOptions: [],\r\n      userInput: \"enter a movie\",\r\n      showResults: false,\r\n      resultsMessage: \"Type a movie to Search!\",\r\n      results: [],\r\n      movieOptionTitles:[]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //set up listener to database\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      const movieArray = [];\r\n      const titlesArray = [];\r\n      for (let key in data) {\r\n        movieArray.push(\r\n          {\r\n            movieTitle: data[key].title,\r\n            movieID: key,\r\n            image: data[key].image,\r\n            votes: data[key].votes\r\n          }\r\n        )\r\n        titlesArray.push(data[key].title);\r\n      }\r\n\r\n      // if a search result is already in the movie options, then dont put it in search result\r\n\r\n\r\n      // someone reason it is NOT rendering , if you have time could you let me know ?\r\n\r\n\r\n     \r\n\r\n      // update the movie state array\r\n      //we are storing the titles array in a seperate array so that we can check later using \r\n      // .includes if the movie is already an option \r\n\r\n      //sort movies by votes\r\n\r\n      movieArray.sort((a, b) => b.votes - a.votes);\r\n\r\n      this.setState({\r\n        movieOptions: movieArray,\r\n        movieOptionsTitles: titlesArray\r\n      }, () => {\r\n          if(this.state.results.length>0) {\r\n            const newResults = this.state.results.filter((result) => {\r\n              return !this.state.movieOptionsTitles.includes(result.title);\r\n            });\r\n            this.setState({ results: newResults });\r\n          }\r\n\r\n      }) \r\n       \r\n    });\r\n  }\r\n\r\n  // helper methods\r\n  noInputHandler = () => this.setState({resultsMessage: \"Type a movie to search!\"});\r\n\r\n  inputHandler = (userInput) => {\r\n\r\n    const dbRef = firebase.database().ref();\r\n    const apiKey = `ffb95a5b116cb8ae246c7c6f51c94ed6`;\r\n\r\n    // make an api call to themovieDatabbase\r\n    const movieDBURL = `https://api.themoviedb.org/3/search/movie?`;\r\n    //endpoint to movie poster path\r\n    const baseImageURL = `https://image.tmdb.org/t/p/w500`;\r\n\r\n    axios({\r\n      url: movieDBURL,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      params: {\r\n        api_key: apiKey,\r\n        query: userInput,\r\n        include_adult: false,\r\n        page: 1\r\n        \r\n      },\r\n    }).then((response) => {\r\n      const theResponse = response;\r\n      response.data.results.length === 0 ?\r\n        this.setState({resultsMessage: \"Sorry no results :(\"}) :\r\n        this.resultsHandler(theResponse.data.results, movieDBURL, baseImageURL, userInput);\r\n    });\r\n  };\r\n\r\n  resultsHandler = (response, movieDBURL, baseImageURL, userInput) => {\r\n    const movieResults =[]\r\n\r\n\r\n    response.forEach((movie) => {\r\n        if (!this.state.movieOptionsTitles.includes(movie.title) && movie.poster_path != null){\r\n          const movieImg = `${baseImageURL}${movie.poster_path}`;\r\n          const newMovie = {\r\n            title: movie.title,\r\n            image: movieImg\r\n          };\r\n          movieResults.push(newMovie);\r\n        }\r\n    });\r\n    this.setState({ results: movieResults });\r\n\r\n  }\r\n\r\n  noResultsToShow = () => {this.setState({resultsMessage: \"Sorry, no matches :(\"})};\r\n\r\n\r\n  addMovieHandler = (movieTitle, poster) => {\r\n    const dbRef = firebase.database().ref();\r\n          const newMovie = {\r\n            title: movieTitle,\r\n            votes: 0,\r\n            image: poster,\r\n          };\r\n          dbRef.push(newMovie);\r\n  }\r\n\r\n  //this function will update state to show the results or not\r\n  showResultsHandler = (boolValue) => this.setState({showResults: boolValue});\r\n\r\n  voteHandler = (event, key, voteToAdd) => {\r\n    // go to key in database respreseinting the movie\r\n    // update the vote b vote to add\r\n    const dbRef = firebase.database().ref(key+\"/votes\");\r\n\r\n    const newVotes = dbRef.votes;\r\n\r\n    dbRef.transaction(function(currentVotes) {\r\n      return currentVotes + voteToAdd;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n        <h1 className=\"mainTitle\">cinegoat</h1>\r\n        <p className=\"description\">An app that tracks the best movie!</p>\r\n          <SearchOption\r\n            showResultsHandler={this.showResultsHandler}\r\n            noInputHandler={this.noInputHandler}\r\n            inputHandler={this.inputHandler}\r\n          />\r\n          {this.state.showResults && (\r\n            <ResultScreen\r\n              results={this.state.results}\r\n              resultsMessage={this.state.resultsMessage}\r\n              showResultsHandler={this.showResultsHandler}\r\n            >\r\n              {this.state.results.map((movieResult, i) => {\r\n                const { image, title, votes } = movieResult;\r\n                \r\n                return (\r\n                  <MovieResult\r\n                    key={i}\r\n                    title={title}\r\n                    votes={votes}\r\n                    image={image}\r\n                    addMovieHandler={this.addMovieHandler}\r\n                  />\r\n                );\r\n              })}\r\n            </ResultScreen>\r\n          )}\r\n        </header>\r\n        <main>\r\n          <ul className=\"movieGallery\">\r\n            {this.state.movieOptions.map((movie, i) => {\r\n              const { movieID, movieTitle, votes, image } = movie;\r\n              return (\r\n                <MovieOption\r\n                  key={i}\r\n                  movieID={movieID}\r\n                  movieTitle={movieTitle}\r\n                  image={image}\r\n                  votes={votes}\r\n                  voteHandler={this.voteHandler}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}