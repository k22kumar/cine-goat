{"version":3,"sources":["SearchOption.js","MovieOption.js","firebase.js","ResultScreen.js","MovieResult.js","App.js","serviceWorker.js","index.js"],"names":["SearchOption","handleUserInput","e","setState","userInput","target","value","state","props","noInputHandler","inputHandler","deferedShowResults","boolValue","showResultsHandler","className","htmlFor","type","name","onFocus","onChange","this","placeholder","Component","MovieOption","deferredLike","key","voteHandler","deferredDislike","deferredInfo","title","description","image","infoHandler","likePressed","dislikePressed","votes","onClick","movieTitle","src","alt","movieID","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ResultScreen","message","children","MovieResult","deferedAddMovie","addMovieHandler","aria-label","App","resultsMessage","database","ref","movieDBURL","axios","url","method","responseType","params","api_key","query","include_adult","page","then","response","theResponse","data","results","length","resultsHandler","baseImageURL","movieResults","forEach","movie","movieOptionsTitles","includes","poster_path","movieImg","newMovie","overview","push","poster","showResults","event","voteToAdd","dbRef","transaction","currentVotes","Swal","fire","html","background","color","backdrop","buttons","confirm","buttonsStyling","movieOptions","movieOptionTitles","on","snapshot","val","movieArray","titlesArray","sort","a","b","newResults","filter","result","map","movieResult","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.511fe8a0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// this component will handle adding a new movie option to the database\r\n\r\n// this class is to search for movie results\r\nclass SearchOption extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n    };\r\n  }\r\n\r\n  // function to handle userInput and store potential movie titles into state\r\n  handleUserInput = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value,\r\n    });\r\n\r\n    this.state.userInput === \"\" ?\r\n    this.props.noInputHandler() :\r\n    this.props.inputHandler(this.state.userInput);\r\n  };\r\n\r\n  //defered function to show the window, it takes a boolean value to update the state in App\r\n  deferedShowResults = (e, boolValue) => {this.props.showResultsHandler(boolValue)};\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"searchOptionContainer\">\r\n        <label htmlFor=\"movieOption\" className=\"visuallyHidden\">\r\n          Search for a movie\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"movieOption\"\r\n          onFocus={(e) => this.deferedShowResults(e, true)}\r\n          onChange={this.handleUserInput}\r\n          placeholder=\"Search for a movie\"\r\n        />\r\n        <p>\r\n          <i className=\"fas fa-search\"></i>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchOption;\r\n","import React, { Component } from \"react\";\r\n\r\n// this class represents the movie option you can vote for.\r\nclass MovieOption extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      likePressed: false,\r\n      dislikePressed: false,\r\n    };\r\n  }\r\n\r\n  deferredLike = (e, key) => {\r\n    this.props.voteHandler(e, key, 1);\r\n  }\r\n\r\n  deferredDislike = (e, key) => {\r\n    this.props.voteHandler(e, key, -1);\r\n  }\r\n\r\n  deferredInfo = (title, description, image) => {\r\n    this.props.infoHandler(title, description, image);\r\n  }\r\n\r\n    render() {\r\n        return (\r\n          <article className=\"movieOptionContainer\">\r\n              <p className=\"votes\">Votes: {this.props.votes}</p>\r\n            <ul className=\"imgAndLikes\">\r\n              <li className=\"movieImg\">\r\n                <button className=\"movieImg\"\r\n                  onClick={() => this.deferredInfo(this.props.movieTitle, this.props.description, this.props.image)}>\r\n                  <div className=\"viewInfo\"><p>View Info</p></div>\r\n                <img\r\n                  src={this.props.image}\r\n                  alt={\"Movie poster for: \" + this.props.movieTitle}\r\n                />\r\n              </button>\r\n              </li>\r\n              <li className=\"likeAndDislike\">\r\n                <button\r\n                  className=\"like\"\r\n                  onClick={(e) => this.deferredLike(e, this.props.movieID)}\r\n                >\r\n                  <i className=\"fas fa-thumbs-up\"></i>\r\n                </button>\r\n                <button\r\n                  className=\"dislike\"\r\n                  onClick={(e) => this.deferredDislike(e, this.props.movieID)}\r\n                >\r\n                  <i className=\"fas fa-thumbs-down\"></i>\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieOption;","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCD6Q57bLOt5Bqzs9iJQM0nVZaGjImMrTg\",\r\n  authDomain: \"movie-vote-e2d81.firebaseapp.com\",\r\n  databaseURL: \"https://movie-vote-e2d81.firebaseio.com\",\r\n  projectId: \"movie-vote-e2d81\",\r\n  storageBucket: \"movie-vote-e2d81.appspot.com\",\r\n  messagingSenderId: \"813095662762\",\r\n  appId: \"1:813095662762:web:31d9582c970f309c98ccd3\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\n\r\n// this class is to hold movie results and display to screen\r\nclass ResultScreen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: \"No results found :(\"\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"resultsContainer\">\r\n            <div className=\"searchMessageContainer\">\r\n              <p className=\"message\">Click \"X\" to close results</p>\r\n              <button\r\n                className=\"close\"\r\n                onClick={() => {\r\n                  this.props.showResultsHandler(false);\r\n                }}\r\n              >\r\n                <i className=\"far fa-times-circle\"></i>\r\n              </button>\r\n            </div>\r\n            <ul className=\"results\">\r\n              {this.props.children }\r\n            </ul>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultScreen;","import React, { Component } from 'react';\r\n\r\n// this class is to show a potential movie result and show to screen\r\nclass MovieResult extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // defered function to pass movie titles from input to main App\r\n  deferedAddMovie = (e) => this.props.addMovieHandler(this.props.title, this.props.image, this.props.description);\r\n\r\n  deferredInfo = (title, description, image) => {\r\n    this.props.infoHandler(title, description, image);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li className=\"movieResult\">\r\n        <button className=\"resultPoster\"\r\n          onClick={() => this.deferredInfo(this.props.title, this.props.description, this.props.image)}>\r\n          <div className=\"viewInfo\"><p>View Info</p></div>\r\n          <img src={this.props.image} alt={this.props.title} />\r\n        </button>\r\n        <button\r\n          aria-label=\"Click here to add a movie option\"\r\n          onClick={this.deferedAddMovie}\r\n          className=\"addToList\"\r\n        >\r\n          Add Candidate <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieResult;","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport SearchOption from \"./SearchOption\";\r\nimport MovieOption from \"./MovieOption\";\r\nimport firebase from \"./firebase\";\r\nimport axios from \"axios\";\r\nimport ResultScreen from \"./ResultScreen\";\r\nimport MovieResult from './MovieResult';\r\nimport Swal from \"sweetalert2\";\r\nclass App extends Component {\r\n  constructor() {\r\n    //put all the movie options in an array and map over them\r\n    super();\r\n    this.state = {\r\n      movieOptions: [],\r\n      userInput: \"enter a movie\",\r\n      showResults: false,\r\n      results: [],\r\n      movieOptionTitles:[]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //set up listener to database\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      const movieArray = [];\r\n      const titlesArray = [];\r\n      for (let key in data) {\r\n        movieArray.push(\r\n          {\r\n            movieTitle: data[key].title,\r\n            movieID: key,\r\n            image: data[key].image,\r\n            votes: data[key].votes,\r\n            description: data[key].description\r\n          }\r\n        )\r\n        titlesArray.push(data[key].title);\r\n      }\r\n\r\n      // if a search result is already in the movie options, then dont put it in search result\r\n\r\n      // update the movie state array\r\n      //we are storing the titles array in a seperate array so that we can check later using \r\n      // .includes if the movie is already an option \r\n\r\n      //sort movies by votes\r\n      movieArray.sort((a, b) => b.votes - a.votes);\r\n\r\n      this.setState({\r\n        movieOptions: movieArray,\r\n        movieOptionsTitles: titlesArray\r\n      }, () => {\r\n          if(this.state.results.length>0) {\r\n            const newResults = this.state.results.filter((result) => {\r\n              return !this.state.movieOptionsTitles.includes(result.title);\r\n            });\r\n            this.setState({ results: newResults });\r\n          }\r\n      }) \r\n    });\r\n  }\r\n\r\n  // helper methods\r\n  noInputHandler = () => this.setState({resultsMessage: \"Type a movie to search!\"});\r\n\r\n  inputHandler = (userInput) => {\r\n\r\n    const dbRef = firebase.database().ref();\r\n    const apiKey = `ffb95a5b116cb8ae246c7c6f51c94ed6`;\r\n\r\n    // make an api call to themovieDatabbase\r\n    const movieDBURL = `https://api.themoviedb.org/3/search/movie?`;\r\n    //endpoint to movie poster path\r\n    const baseImageURL = `https://image.tmdb.org/t/p/w500`;\r\n\r\n    axios({\r\n      url: movieDBURL,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      params: {\r\n        api_key: apiKey,\r\n        query: userInput,\r\n        include_adult: false,\r\n        page: 1\r\n      },\r\n    }).then((response) => {\r\n      const theResponse = response;\r\n      response.data.results.length === 0 ?\r\n        this.setState({resultsMessage: \"Sorry no results :(\"}) :\r\n        this.resultsHandler(theResponse.data.results, movieDBURL, baseImageURL, userInput);\r\n    });\r\n  };\r\n\r\n  resultsHandler = (response, movieDBURL, baseImageURL, userInput) => {\r\n    const movieResults =[]\r\n\r\n    response.forEach((movie) => {\r\n        if (!this.state.movieOptionsTitles.includes(movie.title) && movie.poster_path != null){\r\n          const movieImg = `${baseImageURL}${movie.poster_path}`;\r\n          const newMovie = {\r\n            title: movie.title,\r\n            image: movieImg,\r\n            description: movie.overview\r\n          };\r\n          movieResults.push(newMovie);\r\n        }\r\n    });\r\n    this.setState({ results: movieResults });\r\n  }\r\n\r\n  addMovieHandler = (movieTitle, poster, description) => {\r\n    const dbRef = firebase.database().ref();\r\n          const newMovie = {\r\n            title: movieTitle,\r\n            votes: 0,\r\n            image: poster,\r\n            description: description\r\n          };\r\n          dbRef.push(newMovie);\r\n  }\r\n\r\n  //this function will update state to show the results or not\r\n  showResultsHandler = (boolValue) => this.setState({showResults: boolValue});\r\n\r\n  voteHandler = (event, key, voteToAdd) => {\r\n    // go to key in database respreseinting the movie\r\n    // update the vote b vote to add\r\n    const dbRef = firebase.database().ref(key+\"/votes\");\r\n\r\n    const newVotes = dbRef.votes;\r\n\r\n    dbRef.transaction(function(currentVotes) {\r\n      return currentVotes + voteToAdd;\r\n    });\r\n  }\r\n\r\n  //this function displays an alert with the title of the movie clicked and a description about the movie\r\n  infoHandler = (title, description, image) => {\r\n    Swal.fire({\r\n      title: `<span class=\"sweetAlertTitle\"> ${title} </span>`,\r\n      html: `<p class=\"overview\">${description}</p>`,\r\n      background: `rgba(0, 0, 0, 0.55)`,\r\n      color: `white`,\r\n      backdrop: `\r\n      rgba(66, 99, 170, 0.3)\r\n      url(${image})\r\n      center\r\n      no-repeat\r\n      `,\r\n      buttons: {\r\n        confirm : {className: 'sweetAlertTwo'}\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n        <h1 className=\"mainTitle\">cinegoat</h1>\r\n        <p className=\"description\">An app that tracks the best movie!</p>\r\n          <p className=\"description\">Tap on a movie to learn more!</p>\r\n          <SearchOption\r\n            showResultsHandler={this.showResultsHandler}\r\n            noInputHandler={this.noInputHandler}\r\n            inputHandler={this.inputHandler}\r\n          />\r\n          {this.state.showResults && (\r\n            <ResultScreen\r\n              results={this.state.results}\r\n              resultsMessage={this.state.resultsMessage}\r\n              showResultsHandler={this.showResultsHandler}\r\n            >\r\n              {this.state.results.map((movieResult, i) => {\r\n                const { image, title, votes, description} = movieResult;\r\n                \r\n                return (\r\n                  <MovieResult\r\n                    key={i}\r\n                    title={title}\r\n                    votes={votes}\r\n                    image={image}\r\n                    description={description}\r\n                    addMovieHandler={this.addMovieHandler}\r\n                    infoHandler={this.infoHandler}\r\n                  />\r\n                );\r\n              })}\r\n            </ResultScreen>\r\n          )}\r\n        </header>\r\n        <main>\r\n          <ul className=\"movieGallery\">\r\n            {this.state.movieOptions.map((movie, i) => {\r\n              const { movieID, movieTitle, votes, image, description } = movie;\r\n              return (\r\n                <MovieOption\r\n                  key={i}\r\n                  movieID={movieID}\r\n                  movieTitle={movieTitle}\r\n                  image={image}\r\n                  votes={votes}\r\n                  description={description}\r\n                  voteHandler={this.voteHandler}\r\n                  infoHandler={this.infoHandler}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}